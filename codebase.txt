This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2024-11-09T20:27:04.265Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
public/
  vite.svg
src/
  assets/
    vue.svg
  components/
    HelloWorld.vue
    WeatherCurrent.vue
    WeatherForecast.vue
    WeatherSearch.vue
  stores/
    weatherStore.ts
  types/
    weather.ts
  views/
    HomeView.vue
  App.vue
  main.ts
  style.css
  vite-env.d.ts
.env.example
.gitignore
index.html
package.json
README.md
tsconfig.app.json
tsconfig.json
tsconfig.node.json
vite.config.ts

================================================================
Repository Files
================================================================

================
File: public/vite.svg
================
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="31.88" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 257"><defs><linearGradient id="IconifyId1813088fe1fbc01fb466" x1="-.828%" x2="57.636%" y1="7.652%" y2="78.411%"><stop offset="0%" stop-color="#41D1FF"></stop><stop offset="100%" stop-color="#BD34FE"></stop></linearGradient><linearGradient id="IconifyId1813088fe1fbc01fb467" x1="43.376%" x2="50.316%" y1="2.242%" y2="89.03%"><stop offset="0%" stop-color="#FFEA83"></stop><stop offset="8.333%" stop-color="#FFDD35"></stop><stop offset="100%" stop-color="#FFA800"></stop></linearGradient></defs><path fill="url(#IconifyId1813088fe1fbc01fb466)" d="M255.153 37.938L134.897 252.976c-2.483 4.44-8.862 4.466-11.382.048L.875 37.958c-2.746-4.814 1.371-10.646 6.827-9.67l120.385 21.517a6.537 6.537 0 0 0 2.322-.004l117.867-21.483c5.438-.991 9.574 4.796 6.877 9.62Z"></path><path fill="url(#IconifyId1813088fe1fbc01fb467)" d="M185.432.063L96.44 17.501a3.268 3.268 0 0 0-2.634 3.014l-5.474 92.456a3.268 3.268 0 0 0 3.997 3.378l24.777-5.718c2.318-.535 4.413 1.507 3.936 3.838l-7.361 36.047c-.495 2.426 1.782 4.5 4.151 3.78l15.304-4.649c2.372-.72 4.652 1.36 4.15 3.788l-11.698 56.621c-.732 3.542 3.979 5.473 5.943 2.437l1.313-2.028l72.516-144.72c1.215-2.423-.88-5.186-3.54-4.672l-25.505 4.922c-2.396.462-4.435-1.77-3.759-4.114l16.646-57.705c.677-2.35-1.37-4.583-3.769-4.113Z"></path></svg>

================
File: src/assets/vue.svg
================
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="37.07" height="36" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 198"><path fill="#41B883" d="M204.8 0H256L128 220.8L0 0h97.92L128 51.2L157.44 0h47.36Z"></path><path fill="#41B883" d="m0 0l128 220.8L256 0h-51.2L128 132.48L50.56 0H0Z"></path><path fill="#35495E" d="M50.56 0L128 133.12L204.8 0h-47.36L128 51.2L97.92 0H50.56Z"></path></svg>

================
File: src/components/HelloWorld.vue
================
<script setup lang="ts">
import { ref } from 'vue'

defineProps<{ msg: string }>()

const count = ref(0)
</script>

<template>
  <h1>{{ msg }}</h1>

  <div class="card">
    <button type="button" @click="count++">count is {{ count }}</button>
    <p>
      Edit
      <code>components/HelloWorld.vue</code> to test HMR
    </p>
  </div>

  <p>
    Check out
    <a href="https://vuejs.org/guide/quick-start.html#local" target="_blank"
      >create-vue</a
    >, the official Vue + Vite starter
  </p>
  <p>
    Learn more about IDE Support for Vue in the
    <a
      href="https://vuejs.org/guide/scaling-up/tooling.html#ide-support"
      target="_blank"
      >Vue Docs Scaling up Guide</a
    >.
  </p>
  <p class="read-the-docs">Click on the Vite and Vue logos to learn more</p>
</template>

<style scoped>
.read-the-docs {
  color: #888;
}
</style>

================
File: src/components/WeatherCurrent.vue
================
<script setup lang="ts">
import { useWeatherStore } from '../stores/weatherStore';

const store = useWeatherStore();
</script>

<template>
  <div v-if="store.weatherData" class="current-weather">
    <h2>{{ store.weatherData.city }}</h2>
    <div class="weather-info">
      <img 
        :src="`http://openweathermap.org/img/wn/${store.weatherData.current.icon}@2x.png`"
        :alt="store.weatherData.current.description"
      />
      <div class="temperature">
        {{ store.weatherData.current.temp }}°C
      </div>
      <div class="description">
        {{ store.weatherData.current.description }}
      </div>
      <div class="details">
        <div class="detail">
          <span>Humidity:</span>
          {{ store.weatherData.current.humidity }}%
        </div>
        <div class="detail">
          <span>Wind Speed:</span>
          {{ store.weatherData.current.windSpeed }} m/s
        </div>
      </div>
    </div>
  </div>
</template>

<style scoped lang="scss">
.current-weather {
  padding: 2rem;
  background-color: #f5f5f5;
  border-radius: 8px;
  text-align: center;

  h2 {
    margin-bottom: 1rem;
    color: #333;
  }

  .weather-info {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 1rem;

    img {
      width: 100px;
      height: 100px;
    }

    .temperature {
      font-size: 3rem;
      font-weight: bold;
      color: #333;
    }

    .description {
      text-transform: capitalize;
      color: #666;
    }

    .details {
      display: flex;
      gap: 2rem;
      margin-top: 1rem;

      .detail {
        span {
          font-weight: bold;
          margin-right: 0.5rem;
        }
      }
    }
  }
}
</style>

================
File: src/components/WeatherForecast.vue
================
<script setup lang="ts">
import { useWeatherStore } from '../stores/weatherStore';

const store = useWeatherStore();
</script>

<template>
  <div v-if="store.weatherData" class="weather-forecast">
    <h3>5-Day Forecast</h3>
    <div class="forecast-container">
      <div 
        v-for="day in store.weatherData.forecast" 
        :key="day.date"
        class="forecast-day"
      >
        <div class="date">{{ day.date }}</div>
        <img 
          :src="`http://openweathermap.org/img/wn/${day.icon}.png`"
          :alt="day.description"
        />
        <div class="temp">{{ day.temp }}°C</div>
        <div class="description">{{ day.description }}</div>
      </div>
    </div>
  </div>
</template>

<style scoped lang="scss">
.weather-forecast {
  margin-top: 2rem;
  padding: 2rem;
  background-color: #fff;
  border-radius: 8px;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);

  h3 {
    text-align: center;
    margin-bottom: 1.5rem;
    color: #333;
  }

  .forecast-container {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
    gap: 1rem;

    .forecast-day {
      display: flex;
      flex-direction: column;
      align-items: center;
      padding: 1rem;
      background-color: #f5f5f5;
      border-radius: 4px;

      .date {
        font-weight: bold;
        margin-bottom: 0.5rem;
      }

      .temp {
        font-size: 1.25rem;
        font-weight: bold;
        margin: 0.5rem 0;
      }

      .description {
        text-align: center;
        font-size: 0.875rem;
        color: #666;
        text-transform: capitalize;
      }
    }
  }
}
</style>

================
File: src/components/WeatherSearch.vue
================
<script setup lang="ts">
import { ref } from 'vue';
import { useWeatherStore } from '../stores/weatherStore';

const store = useWeatherStore();
const searchQuery = ref('');

const handleSearch = async () => {
  if (searchQuery.value.trim()) {
    await store.fetchWeather(searchQuery.value.trim());
    searchQuery.value = '';
  }
};
</script>

<template>
  <div class="weather-search">
    <div class="search-container">
      <input
        v-model="searchQuery"
        type="text"
        placeholder="Enter city name..."
        @keyup.enter="handleSearch"
      />
      <button @click="handleSearch" :disabled="store.loading">
        {{ store.loading ? 'Searching...' : 'Search' }}
      </button>
    </div>
    <p v-if="store.error" class="error">{{ store.error }}</p>
  </div>
</template>

<style scoped lang="scss">
.weather-search {
  margin: 2rem 0;

  .search-container {
    display: flex;
    gap: 1rem;
    max-width: 500px;
    margin: 0 auto;

    input {
      flex: 1;
      padding: 0.5rem 1rem;
      border: 1px solid #ddd;
      border-radius: 4px;
      font-size: 1rem;
    }

    button {
      padding: 0.5rem 1rem;
      background-color: #4CAF50;
      color: white;
      border: none;
      border-radius: 4px;
      cursor: pointer;
      
      &:disabled {
        background-color: #ccc;
      }
    }
  }

  .error {
    color: #ff4444;
    margin-top: 1rem;
    text-align: center;
  }
}
</style>

================
File: src/stores/weatherStore.ts
================
import { defineStore } from 'pinia';
import axios from 'axios';
import type { WeatherState, WeatherData } from '../types/weather';

const API_KEY = import.meta.env.VITE_OPENWEATHER_API_KEY;
const BASE_URL = import.meta.env.VITE_OPENWEATHER_BASE_URL;

export const useWeatherStore = defineStore('weather', {
  state: (): WeatherState => ({
    weatherData: null,
    loading: false,
    error: null,
  }),

  actions: {
    async fetchWeather(city: string) {
      if (!API_KEY) {
        this.error = 'API key not configured';
        console.error('OpenWeatherMap API key is not configured');
        return;
      }

      this.loading = true;
      this.error = null;
      
      try {
        // Fetch current weather
        const currentWeather = await axios.get(
          `${BASE_URL}/weather?q=${city}&units=metric&appid=${API_KEY}`
        );

        // Fetch 5-day forecast
        const forecast = await axios.get(
          `${BASE_URL}/forecast?q=${city}&units=metric&appid=${API_KEY}`
        );

        // Process and format the data
        this.weatherData = {
          city,
          current: {
            temp: Math.round(currentWeather.data.main.temp),
            humidity: currentWeather.data.main.humidity,
            windSpeed: currentWeather.data.wind.speed,
            description: currentWeather.data.weather[0].description,
            icon: currentWeather.data.weather[0].icon,
          },
          forecast: forecast.data.list
            .filter((item: any, index: number) => index % 8 === 0)
            .map((item: any) => ({
              date: new Date(item.dt * 1000).toLocaleDateString(),
              temp: Math.round(item.main.temp),
              description: item.weather[0].description,
              icon: item.weather[0].icon,
            })),
        };
      } catch (error: any) {
        this.error = error.response?.data?.message || 'Failed to fetch weather data. Please try again.';
        console.error('Weather fetch error:', error);
      } finally {
        this.loading = false;
      }
    },
  },
});

================
File: src/types/weather.ts
================
export interface WeatherData {
  city: string;
  current: {
    temp: number;
    humidity: number;
    windSpeed: number;
    description: string;
    icon: string;
  };
  forecast: Array<{
    date: string;
    temp: number;
    description: string;
    icon: string;
  }>;
}

export interface WeatherState {
  weatherData: WeatherData | null;
  loading: boolean;
  error: string | null;
}

================
File: src/views/HomeView.vue
================
<script setup lang="ts">
import WeatherSearch from '../components/WeatherSearch.vue';
import WeatherCurrent from '../components/WeatherCurrent.vue';
import WeatherForecast from '../components/WeatherForecast.vue';
</script>

<template>
  <div class="home">
    <h1>Weather App</h1>
    <WeatherSearch />
    <WeatherCurrent />
    <WeatherForecast />
  </div>
</template>

<style scoped lang="scss">
.home {
  max-width: 1200px;
  margin: 0 auto;
  padding: 2rem;

  h1 {
    text-align: center;
    color: #333;
    margin-bottom: 2rem;
  }
}
</style>

================
File: src/App.vue
================
<script setup lang="ts">
import HomeView from './views/HomeView.vue'
</script>

<template>
  <HomeView />
</template>

<style>
#app {
  font-family: Arial, sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  color: #2c3e50;
  margin: 0;
  padding: 0;
}

* {
  box-sizing: border-box;
}

body {
  margin: 0;
  padding: 0;
  background-color: #f0f2f5;
}
</style>

================
File: src/main.ts
================
import { createApp } from 'vue'
import { createPinia } from 'pinia'
import App from './App.vue'

const app = createApp(App)
app.use(createPinia())
app.mount('#app')

================
File: src/style.css
================
:root {
  font-family: Inter, system-ui, Avenir, Helvetica, Arial, sans-serif;
  line-height: 1.5;
  font-weight: 400;

  color-scheme: light dark;
  color: rgba(255, 255, 255, 0.87);
  background-color: #242424;

  font-synthesis: none;
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

a {
  font-weight: 500;
  color: #646cff;
  text-decoration: inherit;
}
a:hover {
  color: #535bf2;
}

body {
  margin: 0;
  display: flex;
  place-items: center;
  min-width: 320px;
  min-height: 100vh;
}

h1 {
  font-size: 3.2em;
  line-height: 1.1;
}

button {
  border-radius: 8px;
  border: 1px solid transparent;
  padding: 0.6em 1.2em;
  font-size: 1em;
  font-weight: 500;
  font-family: inherit;
  background-color: #1a1a1a;
  cursor: pointer;
  transition: border-color 0.25s;
}
button:hover {
  border-color: #646cff;
}
button:focus,
button:focus-visible {
  outline: 4px auto -webkit-focus-ring-color;
}

.card {
  padding: 2em;
}

#app {
  max-width: 1280px;
  margin: 0 auto;
  padding: 2rem;
  text-align: center;
}

@media (prefers-color-scheme: light) {
  :root {
    color: #213547;
    background-color: #ffffff;
  }
  a:hover {
    color: #747bff;
  }
  button {
    background-color: #f9f9f9;
  }
}

================
File: src/vite-env.d.ts
================
/// <reference types="vite/client" />

interface ImportMetaEnv {
    readonly VITE_OPENWEATHER_API_KEY: string
    readonly VITE_OPENWEATHER_BASE_URL: string
  }
  
  interface ImportMeta {
    readonly env: ImportMetaEnv
  }

================
File: .env.example
================
VITE_OPENWEATHER_API_KEY=
VITE_OPENWEATHER_BASE_URL=https://api.openweathermap.org/data/2.5

================
File: .gitignore
================
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?
.env

================
File: index.html
================
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Vite + Vue + TS</title>
  </head>
  <body>
    <div id="app"></div>
    <script type="module" src="/src/main.ts"></script>
  </body>
</html>

================
File: package.json
================
{
  "name": "vue-weather",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vue-tsc -b && vite build",
    "preview": "vite preview"
  },
  "dependencies": {
    "@vueuse/core": "^11.2.0",
    "axios": "^1.7.7",
    "pinia": "^2.2.6",
    "vue": "^3.5.12",
    "vue-router": "^4.4.5"
  },
  "devDependencies": {
    "@vitejs/plugin-vue": "^5.1.4",
    "sass": "^1.80.6",
    "typescript": "~5.6.2",
    "vite": "^5.4.10",
    "vue-tsc": "^2.1.8"
  }
}

================
File: README.md
================
# Vue 3 + TypeScript + Vite

This template should help get you started developing with Vue 3 and TypeScript in Vite. The template uses Vue 3 `<script setup>` SFCs, check out the [script setup docs](https://v3.vuejs.org/api/sfc-script-setup.html#sfc-script-setup) to learn more.

Learn more about the recommended Project Setup and IDE Support in the [Vue Docs TypeScript Guide](https://vuejs.org/guide/typescript/overview.html#project-setup).

================
File: tsconfig.app.json
================
{
  "compilerOptions": {
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.app.tsbuildinfo",
    "target": "ES2020",
    "useDefineForClassFields": true,
    "module": "ESNext",
    "lib": ["ES2020", "DOM", "DOM.Iterable"],
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "Bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,
    "jsx": "preserve",

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedSideEffectImports": true
  },
  "include": ["src/**/*.ts", "src/**/*.tsx", "src/**/*.vue"]
}

================
File: tsconfig.json
================
{
  "files": [],
  "references": [
    { "path": "./tsconfig.app.json" },
    { "path": "./tsconfig.node.json" }
  ]
}

================
File: tsconfig.node.json
================
{
  "compilerOptions": {
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.node.tsbuildinfo",
    "target": "ES2022",
    "lib": ["ES2023"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "Bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedSideEffectImports": true
  },
  "include": ["vite.config.ts"]
}

================
File: vite.config.ts
================
import { defineConfig } from 'vite'
import vue from '@vitejs/plugin-vue'

// https://vite.dev/config/
export default defineConfig({
  plugins: [vue()],
})
